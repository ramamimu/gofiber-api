// Code generated by MockGen. DO NOT EDIT.
// Source: service/threads.go

// Package mocker is a generated GoMock package.
package mocker

import (
	context "context"
	repository "gofiber-api/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryThread is a mock of RepositoryThread interface.
type MockRepositoryThread struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryThreadMockRecorder
}

// MockRepositoryThreadMockRecorder is the mock recorder for MockRepositoryThread.
type MockRepositoryThreadMockRecorder struct {
	mock *MockRepositoryThread
}

// NewMockRepositoryThread creates a new mock instance.
func NewMockRepositoryThread(ctrl *gomock.Controller) *MockRepositoryThread {
	mock := &MockRepositoryThread{ctrl: ctrl}
	mock.recorder = &MockRepositoryThreadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryThread) EXPECT() *MockRepositoryThreadMockRecorder {
	return m.recorder
}

// AddThread mocks base method.
func (m *MockRepositoryThread) AddThread(ctx context.Context, author, content string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddThread", ctx, author, content)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddThread indicates an expected call of AddThread.
func (mr *MockRepositoryThreadMockRecorder) AddThread(ctx, author, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddThread", reflect.TypeOf((*MockRepositoryThread)(nil).AddThread), ctx, author, content)
}

// DeleteThread mocks base method.
func (m *MockRepositoryThread) DeleteThread(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThread", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteThread indicates an expected call of DeleteThread.
func (mr *MockRepositoryThreadMockRecorder) DeleteThread(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThread", reflect.TypeOf((*MockRepositoryThread)(nil).DeleteThread), ctx, id)
}

// EditThread mocks base method.
func (m *MockRepositoryThread) EditThread(ctx context.Context, id, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditThread", ctx, id, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditThread indicates an expected call of EditThread.
func (mr *MockRepositoryThreadMockRecorder) EditThread(ctx, id, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditThread", reflect.TypeOf((*MockRepositoryThread)(nil).EditThread), ctx, id, content)
}

// GetThreads mocks base method.
func (m *MockRepositoryThread) GetThreads(ctx context.Context) []repository.Thread {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThreads", ctx)
	ret0, _ := ret[0].([]repository.Thread)
	return ret0
}

// GetThreads indicates an expected call of GetThreads.
func (mr *MockRepositoryThreadMockRecorder) GetThreads(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThreads", reflect.TypeOf((*MockRepositoryThread)(nil).GetThreads), ctx)
}
