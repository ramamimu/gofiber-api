// Code generated by MockGen. DO NOT EDIT.
// Source: httphandler/threads.go

// Package mocker is a generated GoMock package.
package mocker

import (
	context "context"
	repository "gofiber-api/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHttpThreadHandlerRepo is a mock of HttpThreadHandlerRepo interface.
type MockHttpThreadHandlerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockHttpThreadHandlerRepoMockRecorder
}

// MockHttpThreadHandlerRepoMockRecorder is the mock recorder for MockHttpThreadHandlerRepo.
type MockHttpThreadHandlerRepoMockRecorder struct {
	mock *MockHttpThreadHandlerRepo
}

// NewMockHttpThreadHandlerRepo creates a new mock instance.
func NewMockHttpThreadHandlerRepo(ctrl *gomock.Controller) *MockHttpThreadHandlerRepo {
	mock := &MockHttpThreadHandlerRepo{ctrl: ctrl}
	mock.recorder = &MockHttpThreadHandlerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpThreadHandlerRepo) EXPECT() *MockHttpThreadHandlerRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockHttpThreadHandlerRepo) Add(ctx context.Context, author, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, author, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockHttpThreadHandlerRepoMockRecorder) Add(ctx, author, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockHttpThreadHandlerRepo)(nil).Add), ctx, author, content)
}

// Delete mocks base method.
func (m *MockHttpThreadHandlerRepo) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockHttpThreadHandlerRepoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHttpThreadHandlerRepo)(nil).Delete), ctx, id)
}

// Edit mocks base method.
func (m *MockHttpThreadHandlerRepo) Edit(ctx context.Context, id, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, id, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockHttpThreadHandlerRepoMockRecorder) Edit(ctx, id, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockHttpThreadHandlerRepo)(nil).Edit), ctx, id, content)
}

// GetAll mocks base method.
func (m *MockHttpThreadHandlerRepo) GetAll(ctx context.Context) []repository.Thread {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]repository.Thread)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockHttpThreadHandlerRepoMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockHttpThreadHandlerRepo)(nil).GetAll), ctx)
}
